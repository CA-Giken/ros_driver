#!/usr/bin/env python3
import rospy
import tf
import tf2_ros
import sys

import ensenso_camera.ros2 as ros2py

from tf import transformations

from ensenso_camera_msgs.msg import Parameter

from visualization_msgs.msg import Marker
from geometry_msgs.msg import TransformStamped


LocatePattern = ros2py.import_action("ensenso_camera_msgs", "LocatePattern")
SetParameter = ros2py.import_action("ensenso_camera_msgs", "SetParameter")
target_frame = "camera/track0"

def _main(node_name):
    node = ros2py.create_node(node_name, args=sys.argv)

    loop_rate = ros2py.get_param(node, "rate", 2.0)
    parameter_set = ros2py.get_param(node, "parameter_set", "locate_pattern")
    timeout = ros2py.get_param(node, "timeout", 60)

    ###TF
#    tfBuffer=tf2_ros.Buffer()
#    listener=tf2_ros.TransformListener(tfBuffer)
    broadcaster=tf2_ros.StaticTransformBroadcaster()

    set_parameter_client = ros2py.create_action_client(node, "set_parameter", SetParameter)
    locate_pattern_client = ros2py.create_action_client(node, "locate_pattern", LocatePattern)

    clients = [set_parameter_client, locate_pattern_client]
    ros2py.wait_for_servers(node, clients, timeout_sec=timeout)

    marker_publisher = ros2py.create_publisher(node, Marker, "pattern_marker", queue_size=10)

    parameters = [
        Parameter(key=Parameter.PROJECTOR, bool_value=False),
        Parameter(key=Parameter.FRONT_LIGHT, bool_value=True),
    ]
    set_parameter_goal = SetParameter.Goal(parameter_set=parameter_set, parameters=parameters)
    ros2py.send_action_goal(node, set_parameter_client, set_parameter_goal)

    def main_loop():
        response = ros2py.send_action_goal(node, locate_pattern_client, LocatePattern.Goal(parameter_set=parameter_set))
        if not response.successful():
            node.get_logger().warn("Action was not successful.")
            return
        print("response",response)

        result = response.get_result()
        print("result",result)
        if result.error.code != 0:
            node.get_logger().error(ros2py.format_error(result.error, "Error while searching for patterns!"))
        elif result.found_pattern:
            node.get_logger().info("Patterns found, publishing marker(s).")

            for pose in result.pattern_poses:
                pose = pose.pose

                marker = Marker()
                marker.header.frame_id = result.frame
                marker.header.stamp = node.get_clock().now()
                marker.ns = "calibration_pattern"
                marker.id = 0
                marker.type = Marker.CUBE
                marker.action = Marker.ADD
                marker.lifetime = ros2py.Duration(2)

                marker.color.a = 1.0
                marker.color.r = 1.0
                marker.color.g = 1.0
                marker.color.b = 1.0

                marker.scale.x = 300  #mm
                marker.scale.y = 300  #mm
                marker.scale.z = 10  #mm

                # Calculate the pose of the marker. It is the pose of the pattern, but with an
                # offset of half the pattern thickness in the pattern's z direction. This is
                # because the reference point of the marker is in the middle of the cube, but
                # the reference point of the pattern is on its surface.

                t = transformations.translation_matrix((pose.position.x, pose.position.y, pose.position.z))
                r = transformations.quaternion_matrix(
                    [pose.orientation.x, pose.orientation.y, pose.orientation.z, pose.orientation.w]
                )
                z_offset = transformations.translation_matrix((0, 0, marker.scale.z/2))

                m = transformations.concatenate_matrices(t, r, z_offset)
                position = transformations.translation_from_matrix(m)
                orientation = transformations.quaternion_from_matrix(m)

                marker.pose.position.x = position[0]
                marker.pose.position.y = position[1]
                marker.pose.position.z = position[2]
                marker.pose.orientation.x = orientation[0]
                marker.pose.orientation.y = orientation[1]
                marker.pose.orientation.z = orientation[2]
                marker.pose.orientation.w = orientation[3]

                print("marker",marker.pose.position.x,marker.pose.position.y,marker.pose.position.z)

                marker_publisher.publish(marker)

                tfs=TransformStamped()
                tfs.header=marker.header
                tfs.child_frame_id=target_frame;
                tfs.transform.translation=marker.pose.position
                tfs.transform.rotation=marker.pose.orientation
                broadcaster.sendTransform([tfs])

    ros2py.execute_at_rate(node, main_loop, loop_rate)


def main():
    ros2py.wrap_main_function(_main, "ensenso_camera_pattern_marker")


if __name__ == "__main__":
    main()
